===============================================简单的包开发============================================
    《简单的包》应用开发原则或者准则：
        1，Flask对象的创建必须在__init__.py中完成，从而安全的导入每一个独立的模块，其中__name__
            会被分配给正确的包

        2，所有的view函数必须导入到__init__.py中，并且必须在应用对象(app）创建完之后导入view



===============================================BP开发============================================
    定义：
        1）BP的处理对象是一个app或者多个app，制作应用组件和支持通用的模式
        2）BP对象的工作方式和Flask（app对象）非常像，但是BP不是一个应用，仅仅是一个：
            描述如何构建和扩展应用的Blueprints(美好新生活)

        PS:
            BP不是一个即插应用，或者说其本身不是一个app，仅仅是一个可以多次注册到app上的操作集合

    用途：
        1，使用地点：
            .   将一个大型的应用进行分解，实例化一个app-多个扩展-一系列的BP；
            .   根据URL前缀来注册不同的BP，用于区别不同的功能
            .   可以使用不同的URL注册同一个蓝图
            .   适当情况下，可以通过BP来提供templates filter，statis，templates，other

    生效时间：
        BP注册之后会被记录将要执行的操作，在如下情况下Flask会关联BP中的views：
            分配请求时；
            生成从一个断点到另一个的URL时；

    蓝图使用过程：
       1）创建
            from flask import Blueprint
            simple_page = Blueprint('simple_page', __name__, template_folder='templates')

       2）注册
            from flask import Flask
            app = Flask(__name__)#一般在app/__init__中初始化了

            from app1.simple_page import simple_page
            app.register_blueprint(simple_page)

       3）使用
            from app1.simple_page import simple_page
            @simple_page.route(...)
            def show(page):
                pass

    显示指定蓝图的资源所在位置：
       __name__：           指明包所在的位置
       static_folder：      指明包下的静态文件名称
       template_folder：    致命模板

